#ifndef DR_SORTING_LIB   /* Include guard */
#define DR_SORTING_LIB

#define MAX_RAND_NUMS 30000// have to be multiple of 2
/// ALL THE IDs INDICATE INT POINTER ADD TO THE FLAG
#define INDEX_OF_NUM_RUNS 				MAX_RAND_NUMS+1
#define ID_SERVER_DATA_GENERATED_FOR1	MAX_RAND_NUMS+2 		// flag indicating data has been generated by the server process
#define ID_CLIENT_1_SECOND_THIRD_SORTED	MAX_RAND_NUMS+3			// flag indicating SECOND half of the data has been sorted
#define ID_SERVER_FIRST_THIRD_SORTED 	MAX_RAND_NUMS+4			// flag indicating FIRST half of the data has been sorted
#define ID_CLIENT_1_CONNECTED			MAX_RAND_NUMS+5 		// client 1 has connected
#define ID_SERVER_START_SORTING	 		MAX_RAND_NUMS+6			// all the processes will start the sorting
#define ID_CLIENT_2_CONNECTED			MAX_RAND_NUMS+7 		// client 2 has connected and
#define ID_CLIENT_2_THIRD_THIRD_SORTED  MAX_RAND_NUMS+8
#define ID_SERVER_DATA_GENERATED_FOR2   MAX_RAND_NUMS+9

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <sys/time.h>
#include <float.h>
#include <limits.h>


/**
 * This functions returns the time in milliseconds
 * from call of start_time to stop_time
 */
double get_time_elap(struct timeval* tvalAfter, struct timeval* tvalBefore);

// Merges two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void merge(int arr[], int l, int m, int r) ;

/* l is for left index and r is right index of the
 sub-array of arr to be sorted */
void merge_sort(int arr[], int l, int r);


#endif // DR_SORTING_LIB
