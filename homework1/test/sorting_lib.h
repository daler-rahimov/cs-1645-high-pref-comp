#ifndef DR_SORTING_LIB   /* Include guard */
#define DR_SORTING_LIB

#define MAX_RAND_NUMS 4// have to be multiple of 2
#define FLAG_INDEX MAX_RAND_NUMS+1
#define TIMEVALS_INDEX MAX_RAND_NUMS+2

#define DATA_HAS_BEEN_GENERATED 1 	// flag indicating data has been generated by the server process
#define SECOND_HALF_HAS_BEEN_SORTED 2// flag indicating SECOND half of the data has been sorted
#define FIRST_HALF_HAS_BEEN_SORTED 4 // flag indicating FIRST half of the data has been sorted
#define CLIENT_HAS_CONNECTED 8 		 // client has connected and starts the time

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <sys/time.h>
#include <float.h>
#include <limits.h>

/**
 * This functions records the time of the day
 * in to tvalBefore
 */
void start_time(struct timeval* tvalBefore) ;
/**
 * This functions records the time of the day
 * in to tvalAfter
 */
void stop_time(struct timeval* tvalAfter) ;
/**
 * This functions returns the time in microseconds
 * from call of start_time to stop_time
 */
long get_time_elap(struct timeval* tvalBefore,struct timeval* tvalAfter) ;

// Merges two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void merge(int arr[], int l, int m, int r) ;

/* l is for left index and r is right index of the
 sub-array of arr to be sorted */
void merge_sort(int arr[], int l, int r);


#endif // DR_SORTING_LIB
